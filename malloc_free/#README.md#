README file for 0x0B-malloc_free
0-create_array.c - creates an array of chars, and initializes it with a specific char.
1-strdup.c - returns a pointer to a newly allocated space in memory, which contains a copy of the string given as a parameter.
2-str_concat.c - concatenates two strings.
3-alloc_grid.c - returns a pointer to a 2 dimensional array of integers.
4-free_grid.c - frees a 2 dimensional grid previously created by your alloc_grid function.

KEY_CONCEPTS

HEAP:In computer science, the heap is a region of memory used for dynamic memory allocation. Unlike the stack, which is used for automatic memory allocation, the heap is used to allocate memory at runtime.

When a program needs to allocate memory on the heap, it makes a request to the operating system, which provides a block of memory. The program then uses this block of memory to store data and can resize it as needed. When the program is finished with the memory, it must explicitly release it back to the operating system, otherwise, the memory will remain allocated, which can cause memory leaks and potentially lead to crashes.

Heap memory is commonly used for dynamically allocated data structures, such as linked lists, trees, and arrays. It is also used for allocating memory for strings, images, and other large data structures. Because the heap is larger and more flexible than the stack, it allows programs to allocate memory dynamically at runtime, making it easier to work with complex data structures and larger datasets. However, it also requires more careful management to prevent memory leaks and other errors.

POINTER TO AN INTEGER ARRAY: is a variable that stores the memory address of the first element of an integer array. This memory address points to the location in memory where the first element of the array is stored. We can then use this pointer to access the elements of the array or to pass the array to a function.

POINTER TO A CHARACTER:char *argstostr(int ac, char **av)
{
	int i; // declare integer variable i for loop iteration
	    int j; // declare integer variable j for loop iteration
	    	int k; // declare integer variable k for loop iteration
		    int len; // declare integer variable len for the total length of strings
		    	char *ret; // declare a pointer to a character for the concatenated string

			len = 0; // initialize len to 0
			    if (ac == 0 || av == NULL) // check if the number of arguments is 0 or av is NULL
			       	   return (NULL); // return NULL if either case is true

				   /* calculate the length of the strings */
				      for (i = 0; i < ac; i++) // iterate through the number of arguments
				      	  {
							for (j = 0; av[i][j] != '\0'; j++) // iterate through the characters in the string
							       	 len += 1; // increment len for each character in the string
								     }

								     /* allocate memory for the concatenated string */
								     	ret = (char *)malloc((len + ac + 1) * sizeof(char)); // allocate memory for concatenated string
									    if (ret == NULL) // check if memory allocation is unsuccessful
									       	    return (NULL); // return NULL if memory allocation fails

										    /* concatenate the strings */
										       for (k = 0; k < (len + ac - 1);) // iterate through concatenated string
										       	   {
													for (i = 0; i < ac; i++) // iterate through the number of arguments
													       {
																for (j = 0; av[i][j] != '\0'; j++) // iterate through the characters in the string
																       	    ret[k + j] = av[i][j]; // concatenate characters to the string
																	    	       k += j; // update index
																		       	       ret[k] = '\n'; // add a new line character after each string
																			       	      	      k += 1; // update index
																					      	   }
																							}
																								return (ret); // return pointer to concatenated string
																								}
																								